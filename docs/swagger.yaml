basePath: /
definitions:
  authDto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  authDto.UserRegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  controllers.HTTPError:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  controllers.Item:
    properties:
      id:
        example: id something
        type: string
    type: object
  models.SuccessResponseDto:
    properties:
      data:
        type: object
      message:
        type: object
      success:
        type: boolean
    type: object
host: localhost:3000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: testttt
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: Test
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: all field should filled
      parameters:
      - description: minimal 8 characters
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/authDto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: User login, just login
      tags:
      - Auth
  /api/v1/logout:
    get:
      consumes:
      - application/json
      description: all field should filled
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: set jwt cookie to expire right now
      tags:
      - Auth
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: all field should filled
      parameters:
      - description: Post Hello yyy
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/authDto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: User register, make sure email and password is unique
      tags:
      - Auth
  /api/v1/user:
    get:
      consumes:
      - application/json
      description: all field should filled
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: get User authentication, this will get the jwt cookie
      tags:
      - Auth
  /this-is-our-new-api:
    post:
      consumes:
      - application/json
      description: Just another Test
      parameters:
      - description: Post Hello xxiiii
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/controllers.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: This is post example
      tags:
      - Item
swagger: "2.0"
